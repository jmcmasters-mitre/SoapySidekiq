#!/bin/python3

import os
import sys
import time
import threading
import argparse
import pickle
import signal

import numpy as np
import SoapySDR
print(SoapySDR, __file__)
from SoapySDR import *

#np.set_printoptions(threshold=sys.maxsize)

############################################################################################
# Settings
############################################################################################
DEBUG = False

# Data transfer settings
rx_chan = 0             # RX1 = 0, RX2 = 1
use_agc = False          # Use or don't use the AGC
timeout_us = int(10e6)
running = True
rx_stream = None
max_qsize = 0
getBlockId = 0
recordId = 0

sample_queue = []

def getBlocks(N, rx_stream):
    global running, sample_queue, max_qsize, getBlockId, write_idx

    getBlockId = threading.get_native_id()
    write_idx = 0

    buff = np.empty(2*N, dtype=np.int16)
    while running:
        if DEBUG:
            print("getBlock", idx)

        # get and throw away samples
        sr = sdr.readStream(rx_stream, [buff], N, timeoutUs=200000)
        rc = sr.ret # number of samples read or the error code
        assert rc == N, 'Error Reading Samples from Device (error code = %d)!' % rc


def monitor():
    global running, sample_queue, recordId, read_idx

    while running:
        setting = sdr.readSetting("overload")
        print("read overload", setting)

        setting = sdr.readSetting("cal_offset")
        print("read cal_offset", setting)

        time.sleep(2)

def signal_handler(sig, frame):
    global running
    print('You pressed Ctrl+C!')
    running = False

############################################################################################
# Receive Signal
############################################################################################
def main(cardno, rx_chan, fs, bw, freq):
    global running, sdr, rx_stream 

    args = dict(card = cardno)

    sdr = SoapySDR.Device(args)

    SoapySDR.setLogLevel(SOAPY_SDR_DEBUG)

    sdr.writeSetting("counter", "true")
    setting = sdr.readSetting("counter")
    print("read counter", setting)

    sdr.setSampleRate(SOAPY_SDR_RX, rx_chan, fs)          # Set sample rate
    sdr.setBandwidth(SOAPY_SDR_RX, rx_chan, fs)          # Set sample rate
    sdr.setGainMode(SOAPY_SDR_RX, rx_chan, use_agc)       # Set the gain mode
    sdr.setFrequency(SOAPY_SDR_RX, rx_chan, freq)         # Tune the LO

    # Create data buffer and start streaming samples to it
    rx_stream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CS16, [rx_chan])  # Setup data stream

    # create a re-usable buffer for receiving samples
    N = sdr.getStreamMTU(rx_stream)
    N = 2*N
    print("Stream MTU",  N)

    getblocks = threading.Thread(target=getBlocks, name='ThreadGet',args=(N,rx_stream, ))
    monitor_thread = threading.Thread(target=monitor, name='ThreadRecord',)

    sdr.activateStream(rx_stream)  # this turns the radio on

    getblocks.start()
    monitor_thread.start()

    print(f"recordId: {recordId}, getBlockId: {getBlockId}")


    path = "/home/dave/SoapySidekiq/tests/samples.bin"

    time_ctr = 0
    while running:
        time.sleep(3)

    getblocks.join()
    monitor_thread.join()

    sdr.deactivateStream(rx_stream)
    sdr.closeStream(rx_stream)


def parse_command_line_arguments():
    """ Create command line options """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='Test overload and cal_offset',
                                     formatter_class=help_formatter)
    parser.add_argument('-c', required=False, dest='card',
                        default='0', help=' Card')
    parser.add_argument('-chan', type=int, required=False, dest='chan',
                        default=0, help=' Channel')
    parser.add_argument('-r', type=float, required=False, dest='fs',
                        default=2e6, help='Sample Rate')
    parser.add_argument('-b', type=float, required=False, dest='bw',
                        default=18e6, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='Frequency')

    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':

    pars = parse_command_line_arguments()
    signal.signal(signal.SIGINT, signal_handler)

    if (pars.fs <= pars.bw):
        print("Warning: Bandwidth must be smaller than the sample rate, Setting bandwidth to 80% of sample rate.")

        pars.bw = 0.8 * pars.fs

    print("card (-c)\t\t:", pars.card, "\t\t\tchannel (-chan)\t\t:", pars.chan)
    print("sample rate (-s)\t:", pars.fs/1000000, "M","\t\tbandwidth (-bw)\t\t:", pars.bw/1000000, "M")
    print("freq (-f)\t:", pars.freq/1000000)

    main(pars.card, pars.chan, pars.fs, pars.bw, pars.freq)


